# Sample Keter config file. Would generally be placed at /opt/keter/etc/keter-config.yaml.

# Directory containing incoming folder, where to store logs, etc. Relative to
# the config file directory.
root: ..

# Whether or not to rotate logs, otherwise log straight to stderr
rotate-logs: false

# Keter can listen on multiple ports for incoming connections. These ports can
# have HTTPS either enabled or disabled.
listeners:
    # HTTP
    - host: "*4" # Listen on all IPv4 hosts
      #port: 80 # Could be used to modify port
    # HTTPS
    - host: "*4"
      #port: 443
      key: key.pem
      certificate: certificate.pem
      session: true

# User to run applications as
# setuid: ubuntu

# Get the user's IP address from x-forwarded-for. Useful when sitting behind a
# load balancer like Amazon ELB.
# ip-from-header: true

# If set, this path will respond 200 OK to requests on any vhost
# healthcheck-path: /keter-health

# Control the port numbers assigned via APPROOT
# external-http-port: 8080
# external-https-port: 450

# Set additional environment variables for all apps
# env:
#    key: value

# Connection time bound in milliseconds, set to 0 to have no time bound,
# i.e. keep connections alive indefinitely. Default value is 5 minutes.
# connection-time-bound: 300000

# replace the default keter responses with your company branding
# These could point the the same file, that's fine.
#
# If a host is requested that doesn't exist next to other apps
# this response is used
# missing-host-response-file: ./missing-host.html
#
# If no hosts at all are available this file is used
# unknown-host-response-file: ./unkown-host.html
#
# if a proxy exception occurs, serve this file.
# the exception gets printed to the log anyway
# proxy-exception-response-file: ./proxy-exception.html

# set a debug port
# cli-port: 1234
#

# Middlewares are configured per app in the bundleâ€™s config/keter.yaml, not here.
# Example (inside a bundle):
#
# stanzas:
#   - type: webapp
#     exec: ./my-app
#     hosts: ["www.example.com"]
#     middleware:
#       - { rate-limiter:
#           { zone_by: default
#           , throttles:
#               [ { name: "req/ip", limit: 100, period: 60, algorithm: "FixedWindow", identifier_by: "ip" } ]
#           }
#         }
#
#   - type: reverse-proxy
#     host: "api.example.com"
#     to: "http://127.0.0.1:9000"
#     middleware:
#       - { rate-limiter:
#           { zone_by: { header: "X-Tenant-ID" }
#           , throttles:
#               [ { name: "api/key", limit: 1000, period: 3600, algorithm: "SlidingWindow", identifier_by: { header: "X-Api-Key" } } ]
#           }
#         }
#
#   - type: static-files
#     root: ./static
#     hosts: ["static.example.com"]
#     middleware:
#       - { rate-limiter:
#           { zone_by: ip
#           , throttles:
#               [ { name: "static/ip", limit: 300, period: 60, algorithm: "LeakyBucket", identifier_by: "ip" } ]
#           }
#         }
